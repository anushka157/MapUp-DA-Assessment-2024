# -*- coding: utf-8 -*-
"""Python_Task_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LHH9qQi5wk2ZEOvUnEImvYn1E13BakBL
"""

import pandas as pd
import warnings
from IPython.display import display  # Import display for showing DataFrames
from datetime import time

warnings.filterwarnings('ignore')


import os
check_colab=False
if 'COLAB_GPU' in os.environ:
    from google.colab import files
    check_colab=True
    print("Running on Google Colab")
else:
    print("Running on local machine")


def load_dataset(file_path: str) -> pd.DataFrame:
    """Load a dataset from a CSV file."""
    df = pd.read_csv(file_path)
    return df


if check_colab==True:
    uploaded = files.upload()

    for filename in uploaded.keys():
        file_path = filename  
        df = load_dataset(file_path)
else:
    print('Wanted to use default dataset? \n (Y) Yes \t (N) No')
    user_choice = input()
    if user_choice.lower() == 'y':
        df = load_dataset(os.path.abspath('datasets/dataset-2.csv'))
    else:
        file_path = input('Enter file path: ')
        df = load_dataset(file_path)

def calculate_distance_matrix(df) -> pd.DataFrame:
    """
    Calculate a distance matrix based on the dataframe, df.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame: Distance matrix
    """
    unique_ids = sorted(set(df['id_start'].unique()) | set(df['id_end'].unique()))

    distance_matrix = pd.DataFrame(0, index=unique_ids, columns=unique_ids)
    for index, row in df.iterrows():
        distance_matrix.at[row['id_start'], row['id_end']] = row['distance']

    for via in unique_ids:
        for start in unique_ids:
            for end in unique_ids:
                if start != end and distance_matrix.at[start, via] > 0 and distance_matrix.at[via, end] > 0:
                    new_distance = distance_matrix.at[start, via] + distance_matrix.at[via, end]
                    if distance_matrix.at[start, end] == 0 or distance_matrix.at[start, end] > new_distance:
                        distance_matrix.at[start, end] = new_distance

    distance_matrix = distance_matrix + distance_matrix.T
    distance_matrix.values[[range(distance_matrix.shape[0])]*2] = 0

    return distance_matrix

result = calculate_distance_matrix(df)
display(result.head(5))

def unroll_distance_matrix(df) -> pd.DataFrame:
    """
    Unroll a distance matrix to a DataFrame in the style of the initial dataset.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame: Unrolled DataFrame containing columns 'id_start', 'id_end', and 'distance'.
    """
    unrolled_data = []
    for start_id in df.index:
        for end_id in df.columns:
            if start_id == end_id:
                continue
            distance_value = df.at[start_id, end_id]

            if distance_value > 0:
                unrolled_data.append({
                    'id_start': start_id,
                    'id_end': end_id,
                    'distance': distance_value
                })

    unrolled_df = pd.DataFrame(unrolled_data)
    return unrolled_df

distance_matrix = calculate_distance_matrix(df)
unrolled_df = unroll_distance_matrix(distance_matrix)
display(unrolled_df.head(5))

def find_ids_within_ten_percentage_threshold(df, reference_id) -> pd.DataFrame:
    """
    Find all IDs whose average distance lies within 10% of the average distance of the reference ID.

    Args:
        df (pandas.DataFrame)
        reference_id (int)

    Returns:
        pandas.DataFrame: DataFrame with IDs whose average distance is within the specified percentage threshold
                          of the reference ID's average distance.
    """
    reference_rows = df[df['id_start'] == reference_id]
    average_distance = reference_rows['distance'].mean()
    threshold_floor = average_distance * 0.9
    threshold_ceiling = average_distance * 1.1
    within_threshold = df[(df['distance'] >= threshold_floor) & (df['distance'] <= threshold_ceiling)]
    return within_threshold

reference_id = 1001410
result = find_ids_within_ten_percentage_threshold(unrolled_df, reference_id)
display(result)

def calculate_toll_rate(df) -> pd.DataFrame:
    """
    Calculate toll rates for each vehicle type based on the unrolled DataFrame.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame: DataFrame with toll rates for different vehicle types.
    """
    rate_coefficients = {'moto': 0.8, 'car': 1.2, 'rv': 1.5, 'bus': 2.2, 'truck': 3.6}

    for vehicle_type, rate_coefficient in rate_coefficients.items():
        df[vehicle_type] = df['distance'] * rate_coefficient

    return df

toll_rate_df = calculate_toll_rate(unrolled_df)
final_output = toll_rate_df.drop(columns=['distance'])
display(final_output)

def calculate_time_based_toll_rates(df) -> pd.DataFrame:
    """
    Calculate time-based toll rates for vehicles based on timestamps.
    
    Args:
        df (pandas.DataFrame): DataFrame with vehicle toll data.
    
    Returns:
        pandas.DataFrame: Updated DataFrame with time-based toll rates.
    """
    time_ranges = {
        'weekday_morning': {'start': time(0, 0, 0), 'end': time(10, 0, 0), 'discount_factor': 0.8},
        'weekday_afternoon': {'start': time(10, 0, 1), 'end': time(18, 0, 0), 'discount_factor': 1.2},
        'weekday_evening': {'start': time(18, 0, 1), 'end': time(23, 59, 59), 'discount_factor': 0.8},
        'weekend': {'start': time(0, 0, 0), 'end': time(23, 59, 59), 'discount_factor': 0.7}
    }

    df['start_time'] = pd.to_datetime(df['start_time']).dt.time
    df['end_time'] = pd.to_datetime(df['end_time']).dt.time

    for time_range, params in time_ranges.items():
        mask = (df['start_time'] >= params['start']) & (df['end_time'] <= params['end'])
        df.loc[mask, 'moto'] *= params['discount_factor']
        df.loc[mask, 'car'] *= params['discount_factor']
        df.loc[mask, 'rv'] *= params['discount_factor']
        df.loc[mask, 'bus'] *= params['discount_factor']
        df.loc[mask, 'truck'] *= params['discount_factor']

    return df